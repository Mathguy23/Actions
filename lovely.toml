[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''chips_text = '0','''
position = 'after'
payload = '''passive = 'discard',
active = 'play_hand','''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''if ((scoring_hand[i].ability.name == 'Glass Card' and not scoring_hand[i].debuff and pseudorandom('glass') < G.GAME.probabilities.normal/scoring_hand[i].ability.extra) or (G.GAME.modifiers.cry_shatter_rate and pseudorandom('cry_shatter') < 1/G.GAME.modifiers.cry_shatter_rate)) and not scoring_hand[i].ability.eternal then'''
position = 'before'
payload = '''if G.GAME.destroy_all then
    destroyed = true
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''for i=1, #G.jokers.cards + #G.consumeables.cards do'''
position = 'before'
payload = '''if G.GAME.score_deck then
    local chip_total = 0
    for i=1, #G.deck.cards do
        local the_card = G.deck.cards[i]
        if the_card.ability.effect == 'Stone Card' then
            chip_total = chip_total + the_card.ability.bonus
        else
            chip_total = chip_total + the_card.base.nominal
        end
    end
    if chip_total > 0 then
        hand_chips = mod_chips(hand_chips + chip_total)
        update_hand_text({delay = 0}, {chips = hand_chips})
        card_eval_status_text(G.deck.cards[1], 'chips', chip_total, percent)
    end
end'''
match_indent = true
